name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.20', '1.21' ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Run tests
      run: go test -v ./...

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache: true

    - name: Build for multiple platforms
      run: |
        GOOS=linux GOARCH=amd64 go build -o terraform-provider-alertops_linux_amd64
        GOOS=windows GOARCH=amd64 go build -o terraform-provider-alertops_windows_amd64.exe
        GOOS=darwin GOARCH=amd64 go build -o terraform-provider-alertops_darwin_amd64
        GOOS=darwin GOARCH=arm64 go build -o terraform-provider-alertops_darwin_arm64

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: terraform-provider-alertops-${{ github.sha }}
        path: terraform-provider-alertops_*

  validate-examples:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.6.0'

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: terraform-provider-alertops-${{ github.sha }}

    - name: Set up local provider
      run: |
        mkdir -p ~/.terraform.d/plugins/local/alertops/alertops/1.0.0/linux_amd64
        cp terraform-provider-alertops_linux_amd64 ~/.terraform.d/plugins/local/alertops/alertops/1.0.0/linux_amd64/terraform-provider-alertops_v1.0.0
        chmod +x ~/.terraform.d/plugins/local/alertops/alertops/1.0.0/linux_amd64/terraform-provider-alertops_v1.0.0

    - name: Validate basic setup example
      run: |
        cd examples/basic-setup
        # Create a temporary terraform.tfvars with dummy values for validation
        cat > terraform.tfvars << EOF
        alertops_api_key = "dummy-key-for-validation"
        company_domain = "example.com"
        environment = "test"
        EOF
        # Update provider source for local testing
        sed -i 's|source  = "alertops/alertops"|source  = "local/alertops/alertops"|' main.tf
        terraform init
        terraform validate

    - name: Validate complete environment example
      run: |
        cd examples/complete-environment
        # Create a temporary terraform.tfvars with dummy values for validation
        cat > terraform.tfvars << EOF
        alertops_api_key = "dummy-key-for-validation"
        organization_name = "test"
        environment = "test"
        company_domain = "example.com"
        EOF
        # Update provider source for local testing
        sed -i 's|source  = "alertops/alertops"|source  = "local/alertops/alertops"|' main.tf
        terraform init
        terraform validate 